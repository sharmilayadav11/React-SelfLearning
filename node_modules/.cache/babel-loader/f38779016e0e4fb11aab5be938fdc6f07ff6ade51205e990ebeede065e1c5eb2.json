{"ast":null,"code":"var _jsxFileName = \"/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/MyComponent/HoksUseState.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport HooksUseState from './MyComponent/Header';\n\n// use state is used if the value of list is changed and\n// the dom(i.e. HTML part) need to re-render.\n// Re-render will not happen unless the state is chaneged.\n// So if you put the lists below to a variable\n// instead of useState and change it\n// you wont see the changes.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HoksUseState() {\n  _s();\n  const [lists, setLists] = useState(['Apple', 'Orange', 'milk', 'jogurt', 'banana']);\n  const [count, setCount] = useState(0);\n\n  // Use effect has major three funtion:\n  useEffect(() => {\n    console.log('Use effect', count);\n\n    // 3. Called when component is destroyed.\n    return () => console.log('Destroyed.');\n\n    // 1. []: Dependency empty array means the code inside the\n    // useeffect will be called only during the initial\n    // load of the component as is mainly used for setting\n    // the inital data needed for the coponent. Sunch as if\n    // it needs to fetch some data from the backend.\n\n    // 2. [count, lists]: This means the code inside the\n    // useEffect will be called every time the value of\n    // count or lists changes as giving in Dependency array.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Shopping list \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: lists.map((value, index) => {\n        if (index % 2 == 0) return /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            color: 'black',\n            background: 'green'\n          },\n          children: [index + 1, \" \", value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // Do not modify the original,\n        // ... Create a copy or original and then add the new things.\n        setLists([...lists, 'Apple 1']);\n      },\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCount(count + 1);\n      },\n      children: \"Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(HoksUseState, \"Q2la5093UbV1VEWLLZSCku+3ZmM=\");\n_c = HoksUseState;\nexport default HoksUseState;\nvar _c;\n$RefreshReg$(_c, \"HoksUseState\");","map":{"version":3,"names":["React","HooksUseState","jsxDEV","_jsxDEV","HoksUseState","_s","lists","setLists","useState","count","setCount","useEffect","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","value","index","style","color","background","onClick","_c","$RefreshReg$"],"sources":["/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/MyComponent/HoksUseState.js"],"sourcesContent":["import React from 'react'\nimport HooksUseState from './MyComponent/Header';\n\n// use state is used if the value of list is changed and\n// the dom(i.e. HTML part) need to re-render.\n// Re-render will not happen unless the state is chaneged.\n// So if you put the lists below to a variable\n// instead of useState and change it\n// you wont see the changes.\nfunction HoksUseState() {\n    const [lists, setLists] = useState([\n        'Apple',\n        'Orange',\n        'milk',\n        'jogurt',\n        'banana',\n    ]);\n    const [count, setCount] = useState(0);\n\n    // Use effect has major three funtion:\n    useEffect(() => {\n        console.log('Use effect', count);\n\n        // 3. Called when component is destroyed.\n        return () => console.log('Destroyed.');\n\n        // 1. []: Dependency empty array means the code inside the\n        // useeffect will be called only during the initial\n        // load of the component as is mainly used for setting\n        // the inital data needed for the coponent. Sunch as if\n        // it needs to fetch some data from the backend.\n\n        // 2. [count, lists]: This means the code inside the\n        // useEffect will be called every time the value of\n        // count or lists changes as giving in Dependency array.\n    }, []);\n\n    return (\n        <div>\n            <div>Shopping list {count}</div>\n            <ul>\n                {lists.map((value, index) => {\n                    if (index % 2 == 0)\n                        return (\n                            <li style={{ color: 'black', background: 'green' }}>\n                                {index + 1} {value}\n                            </li>\n                        );\n                })}\n            </ul>\n            <button\n                onClick={() => {\n                    // Do not modify the original,\n                    // ... Create a copy or original and then add the new things.\n                    setLists([...lists, 'Apple 1']);\n                }}\n            >\n                Add\n            </button>\n            <button\n                onClick={() => {\n                    setCount(count + 1);\n                }}\n            >\n                Count\n            </button>\n        </div>\n    )\n}\n\nexport default HoksUseState"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,sBAAsB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,CAC/B,OAAO,EACP,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,QAAQ,CACX,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACAG,SAAS,CAAC,MAAM;IACZC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,KAAK,CAAC;;IAEhC;IACA,OAAO,MAAMG,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;IAEtC;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIV,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAAW,QAAA,GAAK,gBAAc,EAACL,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChCf,OAAA;MAAAW,QAAA,EACKR,KAAK,CAACa,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACzB,IAAIA,KAAK,GAAG,CAAC,IAAI,CAAC,EACd,oBACIlB,OAAA;UAAImB,KAAK,EAAE;YAAEC,KAAK,EAAE,OAAO;YAAEC,UAAU,EAAE;UAAQ,CAAE;UAAAV,QAAA,GAC9CO,KAAK,GAAG,CAAC,EAAC,GAAC,EAACD,KAAK;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC;MAEjB,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACLf,OAAA;MACIsB,OAAO,EAAEA,CAAA,KAAM;QACX;QACA;QACAlB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE,SAAS,CAAC,CAAC;MACnC,CAAE;MAAAQ,QAAA,EACL;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTf,OAAA;MACIsB,OAAO,EAAEA,CAAA,KAAM;QACXf,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACvB,CAAE;MAAAK,QAAA,EACL;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACb,EAAA,CA3DQD,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA6DrB,eAAeA,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}