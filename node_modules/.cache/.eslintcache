[{"/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/index.js":"1","/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/reportWebVitals.js":"2","/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/App.js":"3","/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/index.js":"4","/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/reportWebVitals.js":"5","/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/App.js":"6","/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/MyComponent/HoksUseState.js":"7"},{"size":535,"mtime":1700132769186,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1700132769186,"results":"10","hashOfConfig":"9"},{"size":217,"mtime":1700228089308,"results":"11","hashOfConfig":"9"},{"size":535,"mtime":1700132769186,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1700132769186,"results":"14","hashOfConfig":"13"},{"size":207,"mtime":1702918355329,"results":"15","hashOfConfig":"13"},{"size":2297,"mtime":1702918337456,"results":"16","hashOfConfig":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"142inck",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"114bvnl",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/index.js",[],[],"/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/reportWebVitals.js",[],[],"/Users/sharmilayadav/Desktop/Study/GitHub/TODO-React/src/App.js",["39"],[],"/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/index.js",[],[],"/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/reportWebVitals.js",[],[],"/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/App.js",[],[],"/Users/sharmilayadav/Desktop/Study/GitHub/React-SelfLearning/src/MyComponent/HoksUseState.js",["40"],[],"import React from 'react'\nimport { useState, useEffect } from 'react';\nimport HoksUseState from './MyComponent/Header';\n\n// use state is used if the value of list is changed and\n// the dom(i.e. HTML part) need to re-render.\n// Re-render will not happen unless the state is chaneged.\n// So if you put the lists below to a variable\n// instead of useState and change it\n// you wont see the changes.\nfunction HoksUseState() {\n    const [lists, setLists] = useState([\n        'Apple',\n        'Orange',\n        'milk',\n        'jogurt',\n        'banana',\n    ]);\n    const [count, setCount] = useState(0);\n\n    // Use effect has major three funtion:\n    useEffect(() => {\n        console.log('Use effect', count);\n\n        // 3. Called when component is destroyed.\n        return () => console.log('Destroyed.');\n\n        // 1. []: Dependency empty array means the code inside the\n        // useeffect will be called only during the initial\n        // load of the component as is mainly used for setting\n        // the inital data needed for the coponent. Sunch as if\n        // it needs to fetch some data from the backend.\n\n        // 2. [count, lists]: This means the code inside the\n        // useEffect will be called every time the value of\n        // count or lists changes as giving in Dependency array.\n    }, []);\n\n    return (\n        <div>\n            <div>Shopping list {count}</div>\n            <ul>\n                {lists.map((value, index) => {\n                    if (index % 2 == 0)\n                        return (\n                            <li style={{ color: 'black', background: 'green' }}>\n                                {index + 1} {value}\n                            </li>\n                        );\n                })}\n            </ul>\n            <button\n                onClick={() => {\n                    // Do not modify the original,\n                    // ... Create a copy or original and then add the new things.\n                    setLists([...lists, 'Apple 1']);\n                }}\n            >\n                Add\n            </button>\n            <button\n                onClick={() => {\n                    setCount(count + 1);\n                }}\n            >\n                Count\n            </button>\n        </div>\n    )\n}\n\nexport default HoksUseState",{"ruleId":"41","severity":1,"message":"42","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":12},{"ruleId":null,"fatal":true,"severity":2,"message":"45","line":11,"column":9,"nodeType":null},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","Parsing error: Identifier 'HoksUseState' has already been declared. (11:9)"]